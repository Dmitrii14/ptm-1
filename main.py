from aiogram.utils import executor
from aiogram import Bot, Dispatcher, types
from aiogram.types.message import ContentType
from telebot import types


TOKEN = "5550601778:AAEcLnx-UCf4sjlMyJOA-7L3-aAulTNQlWo"
TOKEN_PAY = "1877036958:TEST:5995ac386bfd73a83b8f5fb2000e335213a0d345"
VAL = "RUB"
THIS_GROUP = ""
PRICE_LITE = types.LabeledPrice(label='BOX1', amount=72500)
PRICE_PRO = types.LabeledPrice(label='BOX2', amount=120000)
KROSS1 = 'https://ae04.alicdn.com/kf/H9c79f950267c4f3497b6510042f98d8az/-.jpg'
PRO_PHOTO = 'https://drive.google.com/file/d/1GpAOLZ5XCVqqh4o_Hb_Mt0hYBnHnXIkH/view?usp=share_link'
bot = Bot(TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start(message) -> None:
    """
        –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        :message: - –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    panel = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_1 = types.KeyboardButton('üí≥–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫—É (online) (1—Å)')
    btn_2 = types.KeyboardButton('üíµ–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫—É (—á–µ—Ä–µ–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è) (24—á)')
    btn_3 = types.KeyboardButton('‚ÅâÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    panel.add(btn_1, btn_2, btn_3)
    await bot.send_message(message.chat.id,
                           'üìå–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n–Ø –±–æ—Ç üí≥BoxPay –∏ —è –ø–æ–º–æ–≥—É –æ–ø–ª–∞—Ç–∏—Ç—å –ª—é–±—ã–µ –ø–æ–∫—É–ø–∫–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ! '
                           '–ü–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª ‚ÅâÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å–ª–∏ —Ç–µ–±–µ —á—Ç–æ —Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ –ø–æ –æ–ø–ª–∞—Ç–µ –ø–æ–∫—É–ø–æ–∫!',
                           reply_markup=panel)


@dp.message_handler(content_types=["text"])
async def text(message) -> None:
    """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É)
        :message: - –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    if message.text == '‚ÅâÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        panel = types.ReplyKeyboardMarkup(resize_keyboard=True)
        await bot.send_message(message.chat.id,
                               '''üìå–†–∞–∑–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ –ø–æ–∫—É–ø–∫–∏.\nBoxPay - –±–æ—Ç —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞ 
                               –ª—é–±–æ–π –ø–æ–∫—É–ø–∫–∏. –ï—Å—Ç—å –¥–≤–∞ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã:\n   1. üí≥–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫—É (online) - —ç—Ç–æ –æ–ø–ª–∞—Ç–∞ 
                               —á–µ—Ä–µ–∑ –æ–Ω–ª–∞–π–Ω –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –ø–ª–∞—Ç–µ–∂ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å–µ–≥–æ –Ω–∞–≤—Å–µ–≥–æ 1 —Å–µ–∫—É–Ω–¥—É 
                               ( –±—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ ).
                         \n   2. üíµ–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫—É (—á–µ—Ä–µ–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è) - –µ—Å–ª–∏ –≤—ã –±–æ–∏—Ç–µ—Å—å –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞ 
                         ( –∏–ª–∏ –Ω–∞–º –Ω–µ –¥–æ–≤–µ—Ä—è–µ—Ç–µ ), —Ç–æ–≥–¥–∞ —ç—Ç–∞ –æ–ø–ª–∞—Ç–∞ –¥–ª—è –≤–∞—Å, –Ω–æ –æ–Ω–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç 24 —á–∞—Å–æ–≤ –¥–æ 48 
                         —á–∞—Å–æ–≤. –í–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –∏ –æ–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å –æ–ø–ª–∞—Ç–æ–π!
                         \n\n –ö–æ–≥–¥–∞ —è —Å–º–æ–≥—É —É–≤–∏–¥–µ—Ç—å —Å–≤–æ—é –ø–æ–∫—É–ø–∫—É?\n–°—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–æ–≤–∞—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π 
                         –≤–∞–º–∏ –∞–¥—Ä–µ—Å!
                         \n\n –Ø –º–æ–≥—É –æ–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å –≥–¥–µ —É–≥–æ–¥–Ω–æ? –ò–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞?\n –î–∞, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ
                          –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞!''',
                               reply_markup=panel)
    elif message.text == 'üíµ–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫—É (—á–µ—Ä–µ–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è) (24—á)':
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("üá∫üá∏üá¨üáßüá∑üá∫Andrey", url='https://t.me/andreyko777')
        button2 = types.InlineKeyboardButton("üá∫üá∏üá¨üáßüá∑üá∫Dmitriy", url='https://t.me/andreyko777')
        button3 = types.InlineKeyboardButton("üá¨üáßüá∑üá∫Alexandra", url='https://t.me/andreyko777')
        button4 = types.InlineKeyboardButton("üá¨üáßüá∑üá∫Daria", url='https://t.me/andreyko777')
        button5 = types.InlineKeyboardButton("üá∫üá∏üá¨üáßüá∑üá∫Daniil", url='https://t.me/andreyko777')
        button6 = types.InlineKeyboardButton("üá¨üáßüá∑üá∫Sergei", url='https://t.me/andreyko777')
        button7 = types.InlineKeyboardButton("üá∫üá∏üá¨üáßTommy", url='https://t.me/andreyko777')
        button8 = types.InlineKeyboardButton("üá∫üá∏üá¨üáßAngelo", url='https://t.me/andreyko777')
        markup.add(button1, button2, button3, button4, button5, button6, button7, button8)
        await bot.send_message(message.chat.id,
                               '''üö®–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è BoxPayüö®''',
                               reply_markup=markup)
    elif message.text == 'üí≥–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫—É (online) (1—Å)':
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("üíµUSDüá∫üá∏", callback_data="1")
        button2 = types.InlineKeyboardButton("üí∂EURüá™üá∫", callback_data='2')
        button3 = types.InlineKeyboardButton("üí∑AEDüá¶üá™", callback_data='3')
        button4 = types.InlineKeyboardButton("üí¥CNYüá®üá≥", callback_data='4')
        button5 = types.InlineKeyboardButton("üíéRUBüá∑üá∫", callback_data='5')
        markup.add(button1, button2, button3, button4, button5)
        await bot.send_message(message.chat.id,
                               '''‚úÖ–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã‚úÖ''',
                               reply_markup=markup)
    elif message.text == '1':
        panel = types.ReplyKeyboardMarkup(resize_keyboard=True)
        await bot.send_message(message.chat.id,
                               '''test''',
                               reply_markup=panel)
    else:
        panel = types.ReplyKeyboardMarkup(resize_keyboard=True)
        await bot.send_message(message.chat.id,
                               '''‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã‚ùå''',
                               reply_markup=panel)


@dp.callback_query_handler(lambda c: c.data)
async def answer(call: types.CallbackQuery) -> None:
    """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞—Ç—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ callback
        dp.callback_query_handler() - –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
        :call: - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback
    """
    global VAL
    global THIS_GROUP
    if call.data == '1':
        VAL = "USD"
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("üß®BOX1üß®", callback_data='11')
        button2 = types.InlineKeyboardButton("üî•BOX2üî•", callback_data='22')
        markup.add(button1, button2)
        await bot.send_message(call.message.chat.id, '''‚úÖ(USD)–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É BoxPay‚úÖ''', reply_markup=markup)
    if call.data == '2':
        VAL = "EUR"
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("üß®BOX1üß®", callback_data='11')
        button2 = types.InlineKeyboardButton("üî•BOX2üî•", callback_data='22')
        markup.add(button1, button2)
        await bot.send_message(call.message.chat.id, '''‚úÖ(EUR)–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É BoxPay‚úÖ''', reply_markup=markup)
    if call.data == '3':
        VAL = "AED"
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("üß®BOX1üß®", callback_data='11')
        button2 = types.InlineKeyboardButton("üî•BOX2üî•", callback_data='22')
        markup.add(button1, button2)
        await bot.send_message(call.message.chat.id, '''‚úÖ(AED)–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É BoxPay‚úÖ''', reply_markup=markup)
    if call.data == '4':
        VAL = "CNY"
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("üß®BOX1üß®", callback_data='11')
        button2 = types.InlineKeyboardButton("üî•BOX2üî•", callback_data='22')
        markup.add(button1, button2)
        await bot.send_message(call.message.chat.id, '''‚úÖ(CNY)–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É BoxPay‚úÖ''', reply_markup=markup)
    if call.data == '5':
        VAL = "RUB"
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("üß®BOX1üß®", callback_data='11')
        button2 = types.InlineKeyboardButton("üî•BOX2üî•", callback_data='22')
        markup.add(button1, button2)
        await bot.send_message(call.message.chat.id, '''‚úÖ(RUB)–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É BoxPay‚úÖ''', reply_markup=markup)
    if call.data == '11':
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("Pay", pay=True))
        if VAL == 'USD':
            THIS_GROUP = "BOX1"
            await bot.send_invoice(call.message.chat.id,
                                   title='–û–ø–ª–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ BoxPay (BOX1)',
                                   description='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX1',
                                   provider_token=TOKEN_PAY,
                                   currency='USD',
                                   photo_url=KROSS1,
                                   photo_width=416,
                                   photo_height=234,
                                   photo_size=416,
                                   need_phone_number=False,
                                   need_email=False,
                                   is_flexible=False,
                                   prices=[types.LabeledPrice(label='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX1', amount=int(2250 / 71 * 100))],
                                   start_parameter="one-month-subscription",
                                   payload="test-invoice-payload", reply_markup=keyboard)
        if VAL == 'RUB':
            THIS_GROUP = "BOX1"
            await bot.send_invoice(call.message.chat.id,
                                   title='–û–ø–ª–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ BoxPay (BOX1)',
                                   description='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX1',
                                   provider_token=TOKEN_PAY,
                                   currency='RUB',
                                   photo_url=KROSS1,
                                   photo_width=416,
                                   photo_height=234,
                                   photo_size=416,
                                   need_phone_number=False,
                                   need_email=False,
                                   is_flexible=False,
                                   prices=[types.LabeledPrice(label='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX1', amount=int(232500))],
                                   start_parameter="one-month-subscription",
                                   payload="test-invoice-payload", reply_markup=keyboard)
        if VAL == 'AED':
            THIS_GROUP = "BOX1"
            await bot.send_invoice(call.message.chat.id,
                                   title='–û–ø–ª–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ BoxPay (BOX1)',
                                   description='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX1',
                                   provider_token=TOKEN_PAY,
                                   currency='AED',
                                   photo_url=KROSS1,
                                   photo_width=416,
                                   photo_height=234,
                                   photo_size=416,
                                   need_phone_number=False,
                                   need_email=False,
                                   is_flexible=False,
                                   prices=[types.LabeledPrice(label='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX1', amount=int(2250 * 0.0505 * 100))],
                                   start_parameter="one-month-subscription",
                                   payload="test-invoice-payload", reply_markup=keyboard)
        if VAL == 'EUR':
            THIS_GROUP = "BOX1"
            await bot.send_invoice(call.message.chat.id,
                                   title='–û–ø–ª–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ BoxPay (BOX1)',
                                   description='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX1',
                                   provider_token=TOKEN_PAY,
                                   currency='EUR',
                                   photo_url=KROSS1,
                                   photo_width=416,
                                   photo_height=234,
                                   photo_size=416,
                                   need_phone_number=False,
                                   need_email=False,
                                   is_flexible=False,
                                   prices=[types.LabeledPrice(label='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX1', amount=int(2250 / 76 * 100))],
                                   start_parameter="one-month-subscription",
                                   payload="test-invoice-payload", reply_markup=keyboard)
        if VAL == 'CNY':
            THIS_GROUP = "BOX1"
            await bot.send_invoice(call.message.chat.id,
                                   title='–û–ø–ª–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ BoxPay (BOX1)',
                                   description='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX1',
                                   provider_token=TOKEN_PAY,
                                   currency='CNY',
                                   photo_url=KROSS1,
                                   photo_width=416,
                                   photo_height=234,
                                   photo_size=416,
                                   need_phone_number=False,
                                   need_email=False,
                                   is_flexible=False,
                                   prices=[types.LabeledPrice(label='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX1', amount=int(2250 / 10.2 * 100))],
                                   start_parameter="one-month-subscription",
                                   payload="test-invoice-payload", reply_markup=keyboard)
    if call.data == '22':
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("Pay", pay=True))
        if VAL == 'USD':
            THIS_GROUP = "BOX2"
            await bot.send_invoice(call.message.chat.id,
                                   title='–û–ø–ª–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ BoxPay (BOX2)',
                                   description='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX2',
                                   provider_token=TOKEN_PAY,
                                   currency='USD',
                                   photo_url=KROSS1,
                                   photo_width=416,
                                   photo_height=234,
                                   photo_size=416,
                                   need_phone_number=False,
                                   need_email=False,
                                   is_flexible=False,
                                   prices=[types.LabeledPrice(label='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX2', amount=int(4700 / 71 * 100))],
                                   start_parameter="one-month-subscription",
                                   payload="test-invoice-payload", reply_markup=keyboard)
        if VAL == 'RUB':
            THIS_GROUP = "BOX2"
            await bot.send_invoice(call.message.chat.id,
                                   title='–û–ø–ª–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ BoxPay (BOX2)',
                                   description='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX2',
                                   provider_token=TOKEN_PAY,
                                   currency='RUB',
                                   photo_url=KROSS1,
                                   photo_width=416,
                                   photo_height=234,
                                   photo_size=416,
                                   need_phone_number=False,
                                   need_email=False,
                                   is_flexible=False,
                                   prices=[types.LabeledPrice(label='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX2', amount=int(480000))],
                                   start_parameter="one-month-subscription",
                                   payload="test-invoice-payload", reply_markup=keyboard)
        if VAL == 'AED':
            THIS_GROUP = "BOX2"
            await bot.send_invoice(call.message.chat.id,
                                   title='–û–ø–ª–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ BoxPay (BOX2)',
                                   description='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX2',
                                   provider_token=TOKEN_PAY,
                                   currency='AED',
                                   photo_url=KROSS1,
                                   photo_width=416,
                                   photo_height=234,
                                   photo_size=416,
                                   need_phone_number=False,
                                   need_email=False,
                                   is_flexible=False,
                                   prices=[types.LabeledPrice(label='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX2', amount=int(4700 * 0.0505 * 100))],
                                   start_parameter="one-month-subscription",
                                   payload="test-invoice-payload", reply_markup=keyboard)
        if VAL == 'EUR':
            THIS_GROUP = "BOX2"
            await bot.send_invoice(call.message.chat.id,
                                   title='–û–ø–ª–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ BoxPay (BOX2)',
                                   description='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX2',
                                   provider_token=TOKEN_PAY,
                                   currency='EUR',
                                   photo_url=KROSS1,
                                   photo_width=416,
                                   photo_height=234,
                                   photo_size=416,
                                   need_phone_number=False,
                                   need_email=False,
                                   is_flexible=False,
                                   prices=[types.LabeledPrice(label='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX2', amount=int(4700 / 76 * 100))],
                                   start_parameter="one-month-subscription",
                                   payload="test-invoice-payload", reply_markup=keyboard)
        if VAL == 'CNY':
            THIS_GROUP = "BOX2"
            await bot.send_invoice(call.message.chat.id,
                                   title='–û–ø–ª–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ BoxPay (BOX2)',
                                   description='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX2',
                                   provider_token=TOKEN_PAY,
                                   currency='CNY',
                                   photo_url=KROSS1,
                                   photo_width=416,
                                   photo_height=234,
                                   photo_size=416,
                                   need_phone_number=False,
                                   need_email=False,
                                   is_flexible=False,
                                   prices=[types.LabeledPrice(label='–∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX2', amount=int(4700 / 11.4 * 100))],
                                   start_parameter="one-month-subscription",
                                   payload="test-invoice-payload", reply_markup=keyboard)


@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery) -> None:
    """
        –§—É–Ω–∫–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ checkid
        :pre_checkout_q: - –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
    """
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message) -> None:
    """
        –§—É–Ω–∫—Ü–∏—è —É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        :message: - –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    global THIS_GROUP
    print("SUCCESSFUL PAYMENT:")
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")
    await bot.send_message(message.chat.id,
                           f"–ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} "
                           f"{message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!")
    if THIS_GROUP == "LITE":
        await bot.send_message(message.chat.id,
                               f"""üì≤–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX1!\n–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤, —á—Ç–æ –Ω—É–∂–Ω–æ 
                               –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ: 
                               \n\n   1. ‚úÖ–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ (–æ–Ω —Å–æ–æ–±—â–∏—Ç –∫–æ–≥–¥–∞ –≤–∞—à–∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –ø—Ä–∏–±—É–¥—É—Ç)
                               \n   2. ‚úÖ–ü–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –∫—Ä–æ—Å—Å–æ–≤–æ–∫ —É –≤–∞—Å –µ—Å—Ç—å —Ä–æ–≤–Ω–æ 5 –¥–Ω–µ–π —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å 
                               –∏—Ö —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ—á—Ç—ã.
                               """)
    if THIS_GROUP == "PRO":
        await bot.send_message(message.chat.id,
                               f"""üì≤–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ BOX2!\n–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤, —á—Ç–æ –Ω—É–∂–Ω–æ 
                               –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ: 
                               \n\n   1. ‚úÖ–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ (–æ–Ω —Å–æ–æ–±—â–∏—Ç –∫–æ–≥–¥–∞ –≤–∞—à–∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –ø—Ä–∏–±—É–¥—É—Ç).
                               \n   2. ‚úÖ–ü–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –∫—Ä–æ—Å—Å–æ–≤–æ–∫ —É –≤–∞—Å –µ—Å—Ç—å —Ä–æ–≤–Ω–æ 5 –¥–Ω–µ–π —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å 
                               –∏—Ö —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ—á—Ç—ã.
                               """)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
